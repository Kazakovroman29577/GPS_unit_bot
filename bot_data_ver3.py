import json

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, \
    ConversationHandler, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞

TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'

# –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö

DATA_FILE = 'equipment_data.json'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ ConversationHandler

ASKING_IMEI = 1


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞

def load_data():
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [

        [InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI", callback_data='check_imei')]

    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(

        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI.",

        reply_markup=reply_markup

    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    await query.answer()

    if query.data == 'check_imei':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ IMEI –¥–ª—è –ø–æ–∏—Å–∫–∞:")

        return ASKING_IMEI


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IMEI

async def receive_imei(update: Update, context: ContextTypes.DEFAULT_TYPE):
    imei_input = update.message.text.strip()

    data_list = load_data()

    found_obj = None

    for obj in data_list:

        if obj.get('imei') == imei_input:
            found_obj = obj

            break

    if found_obj:

        info = (

            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IMEI {imei_input}:\n"

            f"–§–∏–ª–∏–∞–ª: {found_obj.get('branch')}\n"

            f"–ë—Ä–µ–Ω–¥: {found_obj.get('brand')}\n"

            f"–ú–æ–¥–µ–ª—å: {found_obj.get('model')}\n"

            f"–°—Ç–∞—Ç—É—Å: {found_obj.get('status')}\n"

            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {found_obj.get('condition')}\n"

            f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {found_obj.get('location')}\n"

            f"–î–∞—Ç–∞: {found_obj.get('date')}"

        )

    else:

        info = "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await update.message.reply_text(info)

    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.')

    return ConversationHandler.END


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(

        entry_points=[CallbackQueryHandler(button)],

        states={

            ASKING_IMEI: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_imei)],

        },

        fallbacks=[CommandHandler('cancel', cancel)],

    )

    app.add_handler(CommandHandler("start", start))

    app.add_handler(conv_handler)

    app.run_polling()


if __name__ == '__main__':
    main()
